name: Update adg-dns Rule

on: 
  schedule:
    - cron: 0 0,8,16 * * *
  workflow_dispatch:

env:
  TZ: Asia/Shanghai  

jobs:
  update-rules:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Download and process rules
      run: |
        FILES=()
        curl -o adblockdns.txt https://raw.githubusercontent.com/217heidai/adblockfilters/main/rules/adblockdns.txt
        FILES+=("adblockdns.txt")
        curl -o awavenue_ads_rule_singbox.json https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Singbox-regex.json

        sed '/^\/\/.*$/d' awavenue_ads_rule_singbox.json > awavenue_ads_rule_clean.json

        if ! jq empty awavenue_ads_rule_clean.json; then
          echo "Error: Invalid JSON format in awavenue_ads_rule_clean.json"
          exit 1
        fi

        jq -r '.rules[].domain[]' awavenue_ads_rule_clean.json > extracted_domains.txt || true
        FILES+=("extracted_domains.txt")
        cat "${FILES[@]}" > combined_rules.txt
        
        grep '^\|\|' combined_rules.txt | sed '/^!/d; s/^||//; s/\^$//' | sort -u | sed '/^$/d' > new_blacklist.txt

        grep '^@@||' combined_rules.txt | sed '/^!/d; s/^@@||//; s/\^$//' | sort -u | sed '/^$/d' > temp_whitelist.txt
        
        cat temp_whitelist.txt noblock.txt | sort -u | sed '/^$/d' > whitelist.txt

        cat new_blacklist.txt block.txt | sort -u | sed '/^$/d' > temp_blacklist.txt
        mv temp_blacklist.txt blacklist.txt

        grep -vxFf whitelist.txt blacklist.txt > temp_blacklist.txt
        mv temp_blacklist.txt blacklist.txt

        sed -i '/^@@/d' blacklist.txt

        LC_ALL=C sort -u -o blacklist.txt blacklist.txt
        LC_ALL=C sort -u -o block.txt block.txt 
        LC_ALL=C sort -u -o noblock.txt noblock.txt
        LC_ALL=C sort -u -o whitelist.txt whitelist.txt
        touch blacklist.txt block.txt noblock.txt whitelist.txt

    - name: Create adg-dns.json
      run: |
        if ! domain_regex_raw=$(jq -r '.rules[0].domain_regex' awavenue_ads_rule_clean.json); then
          echo "Error: Failed to extract domain_regex"
          exit 1
        fi
        
        if ! echo "$domain_regex_raw" | jq empty; then
          echo "Error: Invalid domain_regex JSON format"
          exit 1
        fi
        
        {
          echo '{
            "version": 3,
            "rules": [
              {
                "domain_suffix": ['
          
          sed 's/.*/"&",/' blacklist.txt | sed '/^""$/d; /^"@@/d' | sed '$ s/,$//'
          
          echo '                ],'
          echo '                "domain_regex":'
          echo "$domain_regex_raw"
          echo '              }'
          echo '            ]'
          echo '          }'
        } > temp_adg-dns.json
        
        if ! jq empty temp_adg-dns.json; then
          echo "Error: Invalid final JSON format"
          exit 1
        fi
        
        jq . temp_adg-dns.json > adg-dns.json
        rm temp_adg-dns.json

    - name: Debug adg-dns.json
      run: |
        echo "Validating final JSON format..."
        if ! jq empty adg-dns.json; then
          echo "Error: Invalid JSON in final file"
          exit 1
        fi
        echo "Final file content:"
        cat adg-dns.json

    - name: Setup sing-box (release)
      run: |
        LATEST_VERSION=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r .tag_name)
        echo "Latest sing-box version: $LATEST_VERSION"
        wget https://github.com/SagerNet/sing-box/releases/download/${LATEST_VERSION}/sing-box-${LATEST_VERSION#v}-linux-amd64.tar.gz
        tar -xzvf sing-box-${LATEST_VERSION#v}-linux-amd64.tar.gz
        sudo mv sing-box-${LATEST_VERSION#v}-linux-amd64/sing-box /usr/local/bin/
        sing-box version

    - name: Convert adg-dns.json to adg-dns.srs
      run: |
        sing-box rule-set compile --output adg-dns.srs adg-dns.json

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add blacklist.txt whitelist.txt block.txt noblock.txt adg-dns.json adg-dns.srs
        git commit -m "Force update DNS rules with sorted files" || echo "No changes to commit"
        git push
